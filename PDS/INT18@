1
-
0                  INSTITUTE FOR COMPUTER SERVICES AND APPLICATIONS
0                                  RICE UNIVERSITY
0                                  22 October 1980
0                                Document No. INT018
0                      Requirements for Local MVS TSO Commands
-       The extensions to TSO provided with MVS impose new requirements on
        local TSO commands.  In particular, some effort is required to write a
        command processor so that it will behave reasonably within a CLIST and
        in batch (under a batch TMP).  To satisfy these requirements, it is
        necessary for a command to (a) use the I/O service routines PUTLINE
        and PUTGET in place of TPUT and TGET for user communication, (b)
        establish a meaningful return code upon completion, and (c) flush
        CLIST and terminal input after a significant error.  These three
        topics are discussed in detail below.  For more information on the IBM
        macros and service routines discussed in this document, please see the
        IBM manual Guide to Writing a TSO Terminal Monitor Program or Command
+                  _____ __ _______ _ ___ ________ _______ _______ __ _______
        Processor.
+       _________
-       USER COMMUNICATION
0       The use of TPUT in a command processor for output of messages or data
        will cause the following problems:
0            .  All such output will be lost in batch.
             .  Such output will not be suppressed by the CLIST option NOMSG.
0       For these reasons, PUTLINE should be used in place of TPUT, except for
        functions not supported by PUTLINE, such as messages to another user
        or 3270 full-screen output.  Note that the choice between the DATA and
        INFOR options of PUTLINE should be considered carefully, as only
        PUTLINE INFOR messages are suppressed by the NOMSG option.
0       Because the use of PUTLINE can often be cumbersome, an easy-to-use
        ICSA-written macro UPUT is available (in RICE.MACLIB) to interface to
      | the PUTLINE service routine.  This macro calls a reentrant routine
      | named UKJUPUT, which builds PUTLINE parameters and invokes the service
        routine.  The UKJUPUT load module may be found in the data set
        RICE.TSOSERV.LOAD.
0       The syntax of the UPUT macro is as follows:
0            Ð××××××××××××××××××××××××××××××××××××××××××××××××××××××××××¯
+                        ¯           ¯
             |           |           |                                  |
             |  LABEL    |  MACRO    |    OPERANDS                      |
             |           |           |                                  |
             |×××××××××××|×××××××××××|××××××××××××××××××××××××××××××××××|
+            ¿           ×           ×                                  ]
             |           |           |                                  |
             |  Ýlabel¨  |  UPUT     |    buffer,length                 |
             |           |           |    .                             |
             |           |           |    Ð               ¯             |
             |           |           |    | ,TPUT-options |             |
             |           |           |    ¿               ]             |
             |           |           |    Ð        ¯                    |
             |           |           |    | ,INFOR |                    |
+                                            _____
             |           |           |    | ,DATA  |                    |
             |           |           |    ¿        ]                    |
             |           |           |    Ð                         ¯   |
             |           |           |    | ,HELP=(bufferÝ,length¨) |   |
             |           |           |    ¿                         ]   |
      |      |           |           |    Ð                    ¯        |
      |      |           |           |    | ,CPPL=CPPL-address |        |
      |      |           |           |    | ,IOPL=IOPL-address |        |
      |      |           |           |    ¿                    ]        |
      |      |           |           |    Ð                ¯            |
      |      |           |           |    | ,MF=macro-form |            |
      |      |           |           |    ¿                ]            |
             |           |           |                                  |
             ¿××××××××××××××××××××××××××××××××××××××××××××××××××××××××××]
+                        ¿           ¿
0       buffer - addresses the message to be output.  For an informational
1
        INT018                                                          Page 2
-
             message, the text should include a message-id or, if none is
      |      desired, should begin with a blank.  If MF=L or is omitted, this
      |      operand must be an A-type address; for the E-form the buffer must
      |      be addressible.
0       length - specifies the length of the output line.  The length may be
             specified as *, in which case L'buffer is used.
0       TPUT-options - specifies one or more of the keywords EDIT, ASIS,
             CONTROL, WAIT, NOWAIT, HOLD, NOHOLD, BREAKIN and NOBREAK, with
             the same meanings and defaults as with the TPUT macro.
0       INFOR and DATA - identify the output line as being an informational
             message or a data line, as with the corresponding operands of
             PUTLINE.
0       HELP=(bufferÝ,length¨) - may be used with an informational message to
             supply the text of a second-level message.  If no length is
      |      provided, L'buffer is used.  The same rules apply to the form of
      |      the HELP buffer address as for the primary message.
0       CPPL=CPPL-address - specifies the address of the CPPL for the calling
      |      command processor.
      | IOPL=IOPL-address - specifies the address of an IOPL (containing the
      |      addresses of the UPT, ECT and an attention ECB).  IOPL must be
      |      used in place of CPPL when the calling routine handles attentions
      |      itself.
      | Note:  One of CPPL and IOPL is required for the normal or MF=E form of
      | UPUT; both must be omitted with the MF=L form.  The CPPL and IOPL
      | operands must specify a valid RX-type address or be given in register
      | notation.
0     | MF=macro-form - may be used to generate a parameter list (by
      |      specifying MF=L) or to modify a parameter list and call the
      |      UKJUPUT routine (by specifying MF=(E,list-addr).  If MF is
      |      omitted, a list is generated in-line and the routine is called.
      |      This form of the macro may generate non-reentrant code.
-     | Except when MF=L is used, the address and length operands of UPUT may
      | be specified in register notation, (i.e., "(n)" may be used to
      | indicate that the operand is contained in register n).
0       The return code from UPUT has the same meanings as the return code
        from PUTLINE.
-       The use of TGET for user input leads to the same sort of problem as
      | the use of TPUT for output, (e.g., failure in batch, and refusal to
      | respect the CONTROL NOPROMPT CLIST statement).  Wherever possible, the
      | PUTGET service routine should be used in its place.  This will seldom
      | be a problem, as terminal input is usually required only to correct
      | erroneous or incorrect parameters on the command line, in which case
      | it is performed automatically by the IKJPARS service routine.
0     | As PUTGET is even more cumbersome to use than PUTLINE, ICSA has
      | written UGET and UPROMPT macros to aid in interfacing to PUTGET.  A
      | TPUT-TGET pair performing a prompt can be replaced by a UPROMPT-UGET
      | pair; a TGET without a preceding TPUT can be replaced by a UGET.  The
      | UGET macro calls a reentrant routine (also in RICE.TSOSERV.LOAD) named
      | UKJUGET, which builds PUTGET parameters and invokes the service
      | routine.  The UPROMPT macro does not, however, generate a call.
      | Rather, it generates a parameter list which is referenced by the UGET
      | macro.  This allows a straightforward conversion of TPUT-TGET pairs,
      | given the fact that the PUTGET routine requires both input and output
      | parameters as input.
1
        INT018                                                          Page 3
-
      | The syntaxes of the UPROMPT and UGET macros are as follows:
0     |      Ð××××××××××××××××××××××××××××××××××××××××××××××××××××××××××¯
+                        ¯           ¯
      |      |           |           |                                  |
      |      |  LABEL    |  MACRO    |    OPERANDS                      |
      |      |           |           |                                  |
      |      |×××××××××××|×××××××××××|××××××××××××××××××××××××××××××××××|
+            ¿           ×           ×                                  ]
      |      |           |           |                                  |
      |      |  Ýlabel¨  |  UPROMPT  |    buffer,length                 |
      |      |           |           |    .                             |
      |      |           |           |    Ð               ¯             |
      |      |           |           |    | ,TPUT-options |             |
      |      |           |           |    ¿               ]             |
      |      |           |           |    Ð                         ¯   |
      |      |           |           |    | ,HELP=(bufferÝ,length¨) |   |
      |      |           |           |    ¿                         ]   |
      |      |           |           |    Ð                ¯            |
      |      |           |           |    | ,MF=macro-form |            |
      |      |           |           |    ¿                ]            |
      |      |           |           |                                  |
      |      |×××××××××××|×××××××××××|××××××××××××××××××××××××××××××××××|
+            ¿           ×           ×                                  ]
      |      |           |           |                                  |
      |      |  Ýlabel¨  |  UGET     |    buffer,length,                |
      |      |           |           |    .                             |
      |      |           |           |    Ð               ¯             |
      |      |           |           |    | ,TGET-options |             |
      |      |           |           |    ¿               ]             |
      |      |           |           |    Ð        ¯                    |
      |      |           |           |    | ,CLIST |                    |
      |      |           |           |    | ,TERM  |                    |
+                                            ____
      |      |           |           |    ¿        ]                    |
      |      |           |           |    Ð                    ¯        |
      |      |           |           |    | ,CPPL=CPPL-address |        |
      |      |           |           |    | ,IOPL=IOPL-address |        |
      |      |           |           |    ¿                    ]        |
      |      |           |           |    Ð                       ¯     |
      |      |           |           |    | ,PROMPT=UPROMPT-label |     |
      |      |           |           |    ¿                       ]     |
      |      |           |           |    Ð                ¯            |
      |      |           |           |    | ,MF=macro-form |            |
      |      |           |           |    ¿                ]            |
      |      |           |           |                                  |
      |      ¿××××××××××××××××××××××××××××××××××××××××××××××××××××××××××]
+                        ¿           ¿
0     | The UPROMPT parameters have meanings identical to the corresponding
      | parameters of UPUT.  Note that a prompt message should always include
      | a message-id or an initial blank.  Also note that if a HELP message is
      | specified, it will be ignored unless TERM is specified or defaulted on
      | the corresponding UGET.  The only function of UPROMPT is the
      | definition or modification (if the E macro-form is used) of parameter
      | lists, and so no return codes are defined.
0     | The parameters to UGET have the following meanings:
0     | buffer - addresses a buffer into which an input line should be placed.
      |      If MF=L or is omitted, this operand must be an A-type address;
      |      for the E-form the buffer must be addressible.
0     | length - specifies the size of the input buffer.  It may be specified
      |      as *, in which case L'buffer is used.  If the input line is
      |      longer than the buffer, it is truncated without any error
      |      indication being produced.
0     | TGET-options - specifies one or more of the keywords EDIT, ASIS, WAIT
      |      and NOWAIT, with the same meanings and defaults as with the TGET
      |      macro.
0     | CLIST and TERM - indicate whether the input may come from a CLIST, or
      |      whether it must be read from the terminal.  If CLIST is in
      |      effect, the MODE option of PUTGET is used; if TERM is in effect,
      |      the PROMPT option is used if a PROMPT= operand was present, and
      |      otherwise the TERM option is used.
1
        INT018                                                          Page 4
-
      | CPPL=CPPL-address - specifies the address of the CPPL for the calling
      |      command processor.
      | IOPL=IOPL-address - specifies the address of an IOPL (containing the
      |      addresses of the UPT, ECT and an attention ECB).  IOPL must be
      |      used in place of CPPL when the calling routine handles attentions
      |      itself.
      | Note:  One of CPPL and IOPL is required for the normal or MF=E form of
      | UGET; both must be omitted with the MF=L form.  The CPPL and IOPL
      | operands must specify a valid RX-type address or be given in register
      | notation.
0     | PROMPT=UPROMPT-label - specifies the label of a UPROMPT macro (either
      |      normal or L form) defining the text of a prompt to be written
      |      preceding the TGET.  If PROMPT is omitted, a null output message
      |      is passed to PUTGET (which results in a TGET without an
      |      explanatory message) at the terminal.
0     | MF=macro-form - may be used to generate a parameter list (by
      |      specifying MF=L) or to modify a parameter list and call the
      |      UKJUPUT routine (by specifying MF=(E,list-addr).  If MF is
      |      omitted, a list is generated in-line and the routine is called.
      |      This form of the macro may generate non-reentrant code.
-     | As with UPUT, UGET operand addresses and lengths may be specified in
      | register notation unless MF=L is used.
0     | The return code from UGET has the same meaning as the return code from
      | PUTLINE.  Note that return code 12 will be returned only if the PROMPT
      | option of PUTGET is issued; the UKJUGET routine handles this return
      | code itself in other cases, and re-issues the PUTGET.
-       RETURN CODES
0       CLIST processing requires that a command which executes successfully
        return a zero in register 15, and that an unsuccessful command return
        a non-zero return code.  Failure to observe this rule will prevent
        proper functioning of CLIST ERROR exits.
0     | IBM has standardized two particular return codes: 16, meaning "not
      | enough virtual memory", and 12, indicating any other unrecoverable
        error, particularly an inability to prompt for required information.
        It is recommended, but not required, that recoverable or unimportant
        errors (such as "DATASET x NOT FREED, NOT ALLOCATED") be assigned
        return codes of 4 and/or 8, so they can be distinguished in an ERROR
        exit.  Also, commands which invoke some other processor, such as a
        compiler, should preserve that processor's return code if no errors
        within the prompter itself intervene.
0       After most errors, the STACK DELETE=ALL and TCLEARQ INPUT macros
        should be issued to resynchronize with the terminal user.  This should
        not be done after errors of the "NOT FREED, NOT ALLOCATED" sort, where
+       ___
        successful continuation of a containing CLIST is likely.
