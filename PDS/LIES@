1
-
      The Language Independent  Environment (LIE)  is two  different things.
      It  is a  mechanism by  which assembler  subroutines can  make use  of
      services of the  PL/I Optimizer/Checker environment.   It  can also be
      used to  provide PL/I-like services  in a pure  assembler environment;
      these  services include  simulation of  AUTOMATIC storage  management,
      block structure, ON-units, SIGNAL and GOTO out-of-block.
0     The LIE services are requested via macro  calls.   In a few cases,  it
      may be necessary to set or test bits in the PL/I TCA or DSA,  mappings
      for which  may be obtained using  the PLITCA and PLIDSA  macros.   The
      functional LIE macros and what they do are as follows:
0          LIBEL -- Define a label for use later as a target of LIGOTO.
           LIBLOCK -- Request temporary interception of LIGOTO.
           LIENTRY -- Define an internal or external "procedure".
           LIERRSET  --  Define  program check  handling  in  a  pseudo-PL/I
                environment.
           LIEXIT -- Return from a "procedure" to its caller.
           LIFO -- Obtain LIFO (block-related) storage.
           LIFREE -- Free non-LIFO storage.
           LIGET -- Get non-LIFO storage.
           LIGOTO -- GOTO a PL/I label variable  or a label defined by LIBEL
                in another "procedure".
           LINSURE -- In  a Checkout compiler environment,   invoke "GETMAIN
                assurance".
           LION -- Define an "ON-unit".
           LIONCB -- Generate space  for ON control blocks in the  DSA for a
                "procedure".
           LIREVERT -- Cancel an "ON-unit".
           LIRLSE -- In  a Checkout compiler environment,   invoke "FREEMAIN
                recovery".
           LISECT -- Define a CSECT containing  one or more procedures using
                LIENTRY.
           LISIGNAL -- Signal a PL/I condition or simulate a STOP statement.
-     Now, in a more pedagogical order, here is how the macros are used:
-     LISECT is used  to define a CSECT  which contains one or  more uses of
      LIENTRY.  Its syntax is:
0          &LABEL   LISECT &ON=NO
0     &LABEL defines the  CSECT name,  and &ON specifies whether  on not the
      LION macro will be used.   It is strongly recommended that K'&LABEL be
      8;  for PL/I compatibility,  I suggest that  &LABEL be the name of the
      first entry point, followed by a '1'.
-     LIENTRY  is  used  to  define  a   procedure.    Three  forms  can  be
      distinguished:  external procedures (callable from outside),  internal
      procedures,   and  main  procedures (which  initialize  a  pseudo-PL/I
      environment on entry).  The syntax of LIENTRY is:
0          &LABEL   LIENTRY &DSA=DSA,&DSALEN=DSALEN,&BASE=R11,&PARM=R2,
                          &ISASIZE=,&ENV=
0     &LABEL defines the  procedure name.   For an  external procedure,  the
      name must be shorter than 8 characters;  by convention, internal names
      are exactly  eight characters  long.   &DSA  defines the  name of  the
      procedure's DSA,   and &DSALEN  defines its  length (which  must be  a
      multiple of 8).   When LIENTRY is used normally,  a DSECT named DSA is
      defined to include  AUTOMATIC storage as well as a  PL/I register save
      area,  and DSALEN is  equated to the length of the  DSECT (forced to a
      doubleword multiple).   DSA=*,DSALEN=88  can be specified when  you do
      not need to define a DSA DSECT for  your own data.   (Note that if you
      use the LION  macro,  an explicit DSA definition  is mandatory.   Also
      note that the first  88 bytes of the DSA (116 when  LION is used)  are
      reserved for  use by  the environment,  and  so must  not be  used for
      anything else.)   &BASE specifies the base register for the procedure,
      and &PARM specifies  a register to which  the contents of R1  at entry
      are to be copied.
0     If  &ISASIZE  is  specified,   the procedure  is  defined  as  a  main
      procedure,  and the value of &ISASIZE  defines the size of its initial
      storage area.    The LIENTRY code in  this case will call  the LIEBEGN
      routine to setup a pseudo-PL/I environment.
1
0                                                                     PAGE 2
0     If  &ENV  is specified,   the  procedure  is  defined as  an  internal
      procedure.    &ENV in  this case  defines  a register  into which  the
      contents of R5 on entry should be copied.  It is expected that R5 will
      point to the DSA of the  containing external procedure;  it is easiest
      (if you have  registers to spare)  to just  set up R5 this  way at the
      start and not worry about it thereafter.
-     LIEXIT is used to return from a procedure.  Its syntax is:
0          &LABEL   LIEXIT &RC=
0     &RC may be used to specify a code  which is to be returned in R15;  if
      &RC is omitted, the contents of R15 on entry are restored.
-     The LIFO macro  is used to obtain  LIFO storage,  which will  be freed
      when LIEXIT is used to return.   (In PL/I terms, it gets a VDA.)   Its
      syntax is:
0          &LABEL   LIFO  &LV=
0     &LV is the  amount of storage to obtain  (in bytes).   If it  is not a
      multiple of eight, terrible things will happen.
-     The LIGET macro is  used just like LIFO,  except that  it obtains non-
      LIFO storage which must be explicitly freed with LIFREE.  In a pseudo-
      PL/I environment,   storage allocated  by LIGET  is not  automatically
      freed when the main procedure is LIEXITed.
-     The LIFREE  macro is used  to free  storage allocated by  LIGET.   Its
      syntax is:
0          &LABEL   LIFREE &A=,&LV=
0     &A defines the  location of the area  to free,  and &LV  its length (a
      multiple of 8).
-     The LINSURE macro  is used to attempt  to assure that,  in  a Checkout
      compiler environment,  a  later use of GETMAIN will not  fail.   (In a
      non-Checkout environment, it has no effect.)  Its syntax is:
0          &LABEL   LINSURE &LV=
0     &LV is the amount  of storage which will soon be  required;  it may be
      expressed as an integer constant followed by the letter K.
-     The LIRLSE  macro is  used,  in a  Checkout compiler  environment,  to
      inform the  compiler that  it may now  reclaim storage  freed up  by a
      previous use  of LINSURE.   (In a  non-Checkout environment it  has no
      effect.)  LIRLSE has no parameters.
-     The LIBEL  macro is  used to  define a label  which can  be used  as a
      target of LIGOTO.   LIBEL has two forms,   a static form and a dynamic
      form.   Both  of these  forms must  be used  to successfully  define a
      label.  The syntax of LIBEL is as follows:
0          &NAME    LIBEL &LABEL,&ADDR=
0     If &ADDR= is not specified to LIBEL,   this is a "static" call,  which
      defines the position of the label in the code.  &LABEL in this case is
      the LIE name of the label;  the name field of the macro can be used to
      define a standard assembler name.   Note  that the addresses of &LABEL
      and &NAME will  usually not be the  same.   &NAME can be  branched to,
      while &LABEL should be referenced only  in the dynamic LIBEL macro for
      the same label.
1
0                                                                     PAGE 3
0     When &ADDR= is  specified by LIBEL,  we have a  "dynamic" call,  which
      sets up a PL/I  label variable in the DSA of  its caller.   This macro
      should be positioned so that it will be executed before any attempt to
      LIGOTO the label.  The &LABEL parameter is used to define the point to
      which LIGOTO should transfer control;   it should be defined somewhere
      in the  calling routine by a  static LIBEL).   The &ADDR  value should
      specify the  location of the "label  variable".   The name field  of a
      dynamic LIBEL has its normal meaning.
-     The LIGOTO macro is used to transfer control to a PL/I label variable,
      or to a label in a procedure which called the one issuing LIGOTO.  Its
      syntax is:
0          &NAME    LIGOTO &LABEL
0     &LABEL must specify the address of a  PL/I label variable,  or the LIE
      equivalent (which must  have been previously initialized  by a dynamic
      LIBEL macro).
-     The  LIBLOCK  macro  is  used to  allow  a  procedure  to  temporarily
      intercept "GOTO out-of-block",   so it can perform  cleanup before the
      GOTO completes.   The corresponding PL/I  facility was defined for the
      use of PLISORT, so that a GOTO out of a sort exit could be trapped for
      long enough to terminate the sort program.  Usage of LIBLOCK is rather
      complex; the following steps must be performed:
0     1.  The calling  procedure must have  an internal subroutine  to issue
          LIBLOCK;  this subroutine  must use the LIBLOCK  macro rather than
          LIENTRY.  The subroutine must be entered with a "BAL R14".
0     2.  The calling procedure's DSA  must end with an area of  88 bytes or
          larger,  to  be used as  a DSA  by the internal  subroutine.   The
          internal subroutine should  save registers and load  R13 with this
          secondary DSA address before issuing LIBLOCK.
0     3.  Before calling the internal subroutine,  the mainline should clear
          the secondary DSA, set the CGTO flag in its second byte,  and save
          the contents of TFB1 (a flag byte of the TCA) somewhere handy.
0     4.  Before returning, the mainline should restore TFB1.
0     Now, when the internal subroutine, or one of its descendants, attempts
      to do  a GOTO  which would terminate  the calling  procedure,  control
      returns  to the  instruction after  the  "BAL R14"  which invoked  the
      internal subroutine.    The CGTO flag in  the secondary DSA  will have
      been turned  off,  which  allows the mainline  to determine  whether a
      normal return  or a GOTO  has taken place.    The mainline can  now do
      whatever cleanup is required; when it returns, the GOTO will magically
      continue, due to some arcane manipulation of save areas.
0     The syntax of LIBLOCK is:
0          &LABEL   LIBLOCK &OLDSA=(1)
0     &OLDSA  should be  specified  in the  form (reg),   where  "reg" is  a
      register addressing the DSA for the mainline routine.
1
0                                                                     PAGE 4
0     Here is  a sample code  fragment using LIBLOCK  to show how  it should
      work:
0     ************** MAINLINE CODE
               XC    DSASAVE2,DSASAVE2    CLEAR SECONDARY DSA
               OI    DSASAVE2+1,CGTO      SET GOTO INTERCEPT FLAG
               MVC   DSATCASV,TFB1        SAVE TCA FLAG BYTE
               BAL   R14,INTERNAL         CALL INTERNAL SUBRTN
               TM    DSASAVE2+1,CGTO      ABNORMAL GOTO CAUGHT?
               BNZ   NOGOTO               NO, NORMAL RETURN
0     ************** EXIT CODE
               MVC   TFB1,DSATCASV        RESTORE TCA FLAGS
               LIEXIT ,                   AND RETURN
0     ************** INTERNAL SUBROUTINE
      INTERNAL STM   R14,R11,12(R13)      SAVE REGISTERS
               LR    R2,R13               SAVE MAINLINE DSA ADDRESS
               USING DSA,R2
               LA    R13,DSASAVE2         SET UP NEW DSA REGISTER
               LIBLOCK OLDSA=(R2)         FINISH INTERCEPTION OF GOTOS
0     ************** EXIT FROM INTERNAL SUBROUTINE
               LR    R13,R2
               LM    R14,R11,12(R13)
               BR    R14
0     ************** DSA DEFINITION
      DSA      DSECT
               DS    22F                  STANDARD PL/I DSA
      ************** OTHER DSA FIELDS
      DSATCASV DS    XL1                  TCA BYTE SAVE AREA
               DS    0D                   DOUBLEWORD ALIGN
      DSASAVE2 DS    22F                  DSA FOR INTERNAL ROUTINE
      DSALEN   EQU   *-DSA
-     The LISIGNAL macro is used to signal a PL/I condition.  Its syntax is:
0          &LABEL   LISIGNAL &WK,&COND=
0     &WK addresses a fullword  in the DSA which can be used  as a work area
      by the macro expansion.  &COND specifies the name of a PL/I condition.
      Presently,  the conditions ATTN,  ERROR,  FINISH and STOP are handled.
      (More could  be added  by updating  the LICOND  macro,  which  defines
      them.)  LISIGNAL of the "STOP" condition is equivalent to execution of
      a PL/I STOP statement.
-     The LION macro establishes an ON-unit for a PL/I condition.   Only the
      equivalents of "ON  cond GOTO x" and  "ON cond CALL x"  are supported.
      The syntax of LION is:
0          &LABEL   LION  &COND,&GOTO=,&CALL=
0     The &COND parameter  names the condition to be handled.    Only one of
      &GOTO and &CALL may  be specified;  if &GOTO is used,   it must name a
      "label variable" suitable as a target for LIGOTO; if &CALL is used, it
      must point to an LIENTRY-defined internal procedure.
-     The LIREVERT macro performs the equivalent of a PL/I REVERT statement.
      Its syntax is:
0          &LABEL   LIREVERT &COND
0     &COND is the PL/I condition name which  should no longer be handled by
      this procedure.
-     The LIONCB macro is used to generate PL/I  "ON cells" in the DSA for a
      routine which uses  the LION macro.   It should  be placed immediately
      after the definition of the PL/I part of the DSA (which,  when LION is
      used, should consist of 29 fullwords).  LIONCB has no operands.
1
0                                                                     PAGE 5
0     The LIERRSET  macro is  used in  a pseudo-PL/I  environment to  define
      program-check  handling.    It  can  only be  used  in  a  pseudo-PL/I
      environment;  in a  real PL/I environment it will  do horrible things.
      The syntax of LIERRSET is:
0          &LABEL   LIERRSET &EXIT
0     After the execution of LIERRSET, if a program check occurs, it will be
      intercepted by a  LIE SPIE routine,  which will print  out a procedure
      traceback (using  WTP),  and  then branch to  the &EXIT  label.   When
      control reaches the &EXIT point,  the registers will be the same as at
      the  point of  interrupt,  so  the &EXIT  code  should set  up a  base
      register and execute  LIGOTO or LISIGNAL to get to  a known procedure.
      Note that if a program check occurs  and R12 has been altered from its
      standard LIE contents (a pointer to  a pseudo-TCA),  the LIE SPIE will
      program check and the program will ABEND.  Also note that the LIE SPIE
      exit is cancelled  when the procedure which issued  the first LIERRSET
      returns.
-     When LIE  is used,  with a  few exceptions references to  PL/I control
      blocks should not be necessary.  The pseudo-PL/I implementation of LIE
      does maintain a little bit of the start of the TCA (addressed via R12)
      compatibly with  PL/I.   Notably,  you  can test whether  the Checkout
      compiler is active by "TM TFB0,TTCK"; similarly, you can check for the
      pseudo-PL/I environment by "TM TFB0,TTFC".  (This flag is used by PL/I
      to indicate the  CICS environment;  we have not used  LIE ourselves in
      any context where  this could cause any confusion.)    Also,  the TPRV
      word  can be  trusted  to contain  a  pointer  to the  pseudo-register
      vector,  which,  in a pseudo-PL/I environment,  will be initialized to
      zeroes).   Other fields in the TCA,   DSA etc.,  should not be trusted
      unless you test TTFC to verify a true PL/I environment.
