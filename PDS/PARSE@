1
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
0     TSU System Aids Reference Manual                              Page 1.1
      Assembler Language Interfaces
1
0     IKJPARS EXTENSIONS
+     IKJPARS EXTENSIONS
+     _______ __________
0     The TSU System  Aids completely replaces the  IKJPARS service routine.
      The TSU  routine is friendlier,  and  implements all the  functions of
      this routine as documented in the hilariously named Guide to Writing a
+                                                         _____ __ _______ _
      TMP (as well as a number of undocumented ones).
+     ___
0     One  improvement which  has  been found  to  be a  problem  for a  few
      commands is as follows:  IKJPARS permits an operand to be defined as a
      range (e.g.,   the subfield of the  COL keyword of the  LIST command).
      The standard  IKJPARS calls the validity  check exit once for  such an
      item,  regardless of  whether it is a  single item or a  range.   This
      means that if either element of a range is invalid,  the terminal user
      is forced to reenter both parts.    The TSU IKJPARS calls the validity
      check exit three times for a range,  once for each part,  and once for
      the entire  range,  allowing the  exit to reject  only that part  of a
      range which is invalid.  This can cause problems if different criteria
      apply to  the two parts  of a range.   Also,   if the exit  counts the
      number of  times it is  called to determine the  number of items  in a
      list,  the results  will be incorrect.   This procedure  is not appro-
      priate even when the IBM IKJPARS is  used,  since it will also compute
      an incorrect number  of elements for a  list which is a  subfield of a
      keyword which appears twice on the command line.
0     The TSU version of IKJPARS provides  a major new function which allows
      a caller to define  new types of operands.   To use  this facility,  a
      command with  one or more  operands with  unusual syntax can  take the
      following steps:
0        ® Use the TSU  IKJEXTEN macro to describe each  such operand.   The
           macro will  include the address  of a caller-supplied  routine to
           recognize and validate the operand.
0        ® Write a recognizer routine for  each special operand type (analo-
           gous  to  writing  a  PL/I   recognizer  routine  using  the  TSU
           Programmer Aids).   This routine can inspect an input value,  and
           determine whether the value is  correct or incorrect,  or whether
           the operand is missing;  if a valid value is present,  the recog-
           nizer should also store information about  the parameter in a PDE
           (passed by  IKJPARS)  to  be used  by the  calling command  after
           parsing is complete.    Note that IKJPARS handles  the issuing of
           any required diagnostic messages or prompts,  but that the recog-
           nizer may supply a second-level message to be associated with the
           standard IKJPARS "invalid operand" message.
-
      The IKJEXTEN Macro
+     The IKJEXTEN Macro
+     ___ ________ _____
0     The IKJEXTEN macro  is used to describe a positional  parameter with a
+         IKJEXTEN
      programmer-defined syntax.  The syntax of IKJEXTEN is as follows:
-
-
-
-
-
-
-
-
-     June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.2
      Assembler Language Interfaces
1
0          Ð××××××××××××¯
           |  IKJEXTEN  |
           |××××××××××××××××××××××××××××××××××××××××××××××××××××××××××¯
+          ¿            ¿               ¯
           |                            |                             |
           |  OPERANDS                  |    NOTES                    |
           |                            |                             |
           |××××××××××××××××××××××××××××××××××××××××××××××××××××××××××|
+          ¿                            ¿                             ]
           |                                                          |
           |  ÐÐ×                                                     |
           |      'parameter type',                                   |
+             ||
           |  ¿¿×                                                     |
           |                                                          |
           |  ÐÐ×                                                     |
           |      recognizer                                          |
+             ||
           |  ¿¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,LIST                                               |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,RANGE                                              |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,UPPERCASE                                          |
+                  _________
+              |
           |      ,ASIS                                               |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,PROMPT='prompt-data'                               |
+              |
           |      ,DEFAULT='default-data'                             |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,VALIDCK=exit-address                               |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,HELP=('help-data',...). . . . .at most 9 elements  |
+              |
           |   ¿×                                                     |
           |                                                          |
           |   Ð×                                                     |
           |      ,PARM='parameter-data'                              |
+              |
           |   ¿×                                                     |
           |                                                          |
           ¿××××××××××××××××××××××××××××××××××××××××××××××××××××××××××]
0     Note that  the IKJEXTEN  macro requires a  label,  which  is generated
      within the  PDL DSECT  as the  symbolic address  of the  PDE for  this
      parameter.
0     The operands of IKJEXTEN are used as follows:
0     'parameter-type' - specifies a brief  description of the parameter for
           use in the IKJPARS "invalid operand"  message (which has the form
           "INVALID type: data").
0     recognizer - specifies the label of  the first statement of the recog-
           nizer  routine  for  this  parameter.   If  the  routine  is  not
           contained in the  same assembly as the IKJEXTEN  macro,  an EXTRN
           statement must be used to define it as external.
0     LIST - specifies that a parenthesized list  of operands may be entered
+     LIST
           for this parameter.   The recognizer will be called once for each
           list element.
0     RANGE - specifies that the parameter value may be specified as a range
+     RANGE
           (i.e., as two values separated by a colon).   The recognizer will
           be called once for each part of a range.   If both LIST and RANGE
           are specified,   each element in the  LIST may be specified  as a
           range.
0     UPPERCASE - specifies that the input  parameter is to be translated to
+     UPPERCASE
           upper case.
      ASIS - specifies that the input parameter is not to be translated.
+     ASIS
0     June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.3
      Assembler Language Interfaces
1
0     PROMPT='prompt-data' - specifies  that the parameter is  required,  as
+     PROMPT
           well as  a description to  be used  when IKJPARS prompts  for it.
           The message  generated is  of the  form "ENTER  prompt-data",  or
           "MISSING prompt-data" if prompting is not permitted.
      DEFAULT='default-data' - specifies  a default value for  the parameter
+     DEFAULT
           if no value is specified by the user.
0     VALIDCK=exit-address  -  specifies  the address  of  a  validity-check
+     VALIDCK
           routine to be called after the  recognizer has accepted the input
           parameter.
0     HELP=('help-data',...)  - specifies up to nine "second-level" descrip-
+     HELP
           tions of the defined parameter.    These descriptions are used to
           build messages in the  same way as the PROMPT text  when a "?" is
           entered in response to an IKJPARS prompt.
0     PARM='parameter-data' - specifies  a character string to  be passed to
+     PARM
           the recognizer  routine to further  define the  parameter syntax.
           If no PARM is specified, a zero-length string is passed.
-
      Example 1.1:   Define a required parameter  whose syntax is defined by
           the recognizer  routine RSPACE.    (This recognizer  is shown  in
           Example 1.2.)
0          SPACEVAL IKJEXTEN 'SPACE VALUE',RSPACE,                         *
                          PROMPT='COMPILER SPACE VALUE',                   *
                          HELP='THE AMOUNT OF SPACE THE COMPILER MAY USE', *
                          PARM='6'
-
      IKJPARS Recognizer Routines
+     IKJPARS Recognizer Routines
+     _______ __________ ________
0     A recognizer routine is called from IKJPARS using standard IBM linkage
      conventions,  with a pointer to a  parameter list in register 1.   The
      parameter list consists of seven fullwords, defined as follows:
0          Word 1 -  Addresses the  eight-byte PDE  in which  data is  to be
                returned for a correct input parameter.   By convention, the
                first four bytes contain the address of the parameter value,
                the next two contain the parameter length,  and the last two
                contain flags.   However,  the PDE may be used by the recog-
                nizer in any other manner desired,   save that bit 1 (X'80')
                of the seventh byte of the PDE must be turned on if a param-
                eter has been recognized.  The PDE is zeroed before entry to
                a recognizer.
0          Word 2 - Contains the "user  work area" pointer originally passed
                to IKJPARS in word 7 of the PPL.
0          Word 3 - A word which may be  changed to address an error message
                to be used  as a second-level message  to IKJPARS's standard
                "invalid parameter" message.   The message should be defined
                in standard PUTLINE format.
0          Word 4  -  Addresses a  buffer  which  includes  the text  to  be
                processed by the recognizer.  This buffer is not necessarily
                the original command  buffer.   The first two  bytes contain
                the buffer length and the next  two bytes contain the offset
                of the text to be analyzed,  starting from the fifth byte of
                the buffer.   If the addressed text is accepted, or rejected
                as invalid for the parameter,  the offset in the buffer must
                be  updated  to address  the  point  after the  accepted  or
                rejected  value.   If  the  parameter  is to  be  considered
                missing (e.g.,  if the first character of the value is inap-
                propriate), the offset should not be changed.   Note that it
                is  permissible to  translate text  in the  buffer to  upper
                case, but that other modifications should be avoided.
0          Word 5 - Addresses  the string specified by  the programmer using
                the PARM keyword of the IKJEXTEN macro.  The first two bytes
                contain the number of characters in the string.
-
      June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.4
      Assembler Language Interfaces
1
0          Word 6 - If UPPERCASE was specified  or defaulted on the IKJEXTEN
                macro,  this word points to  an uppercase translation table.
                If ASIS was specified, this word contains zero.
0          Word 7 - Addresses  a routine to get storage  for return informa-
                tion.   This storage is linked  with other storage allocated
                by IKJPARS,   so that it will  be freed when  the programmer
                issues IKJRLSA.   When the get routine is called, register 1
                should contain  the number  of bytes  required;  on  return,
                register 1 will address the allocated storage.  Note that if
                storage  is unavailable  when  the  get routine  is  called,
                IKJPARS will terminate with return code 16 without returning
                to the recognizer.   Also note that this routine ignores the
                contents of register 13,  so it is not necessary to define a
                new save area before a call.
0          After determining whether the input  parameter value is valid,  a
           recognizer should  return to IKJPARS,   passing a return  code in
           register 15.  Valid return codes are as follows:
0           0:  Indicates  successful  recognition.    When   this  code  is
+           0:
                returned, the recognizer should have stored parameter infor-
                mation into the PDE,  updated the text offset in the buffer,
                and possibly translated the parameter value to upper case.
0           4:  Indicates that  the text was  not recognized,  and  that the
+           4:
                parameter value should be regarded as missing.  This code is
                normally returned when  the first character of  the value is
                inappropriate.   When this code is returned, neither the PDE
                nor the text buffer should be changed.
0           8:  Indicates that the text was  not recognized,  and that PARSE
+           8:
                should  issue an  error  message and  prompt  for a  correct
                value.   When this code is  returned,  the recognizer should
                have updated  the text  offset and  may have  translated the
                parameter value to  upper case and/or stored  a second-level
                message address.   It  should not have stored  into the PDE,
                nor issued a message itself.
0     Any other return code is invalid,  and will cause IKJPARS to terminate
      with return code 12.
-
-
-
-
-
-
-
-
-
-
-
-
      June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.5
      Assembler Language Interfaces
1
0     Example  1.2:   The  following is  a complete  recognizer designed  to
           recognize a compiler space parameter,  that is,  an item with the
           syntax Ý-¨n...ÝK¨.   The  PARM passed from the  IKJEXTEN macro is
           assumed to  be a  single character giving  the maximum  number of
           digits allowed (8 if omitted).  If the input value does not begin
           with a minus sign or digit, the parameter is regarded as missing.
           If recognition is successful,  the  returned PDE will contain the
           following:
0               Bytes 0-3:   The address of a  string of digits (without a K
                     or minus sign).   If the  original input contained a K,
                     the K will be removed and replaced by 000.
                Bytes 4-5:  The length of the string addresses by bytes 0-3.
                Byte 6:  A  flag byte.    The X'80'  bit indicates  that the
                     parameter was present, and the X'40' bit indicates that
                     a minus sign was present.£
0          *        REGISTER USAGE FOR THE EXAMPLE IS:
           *              R14-R2        WORK REGISTERS
           *              R3            INPUT BUFFER END ADDRESS
           *              R4            CURRENT TEXT CHARACTER POINTER
           *              R5            INPUT BUFFER POINTER
           *              R6            MAXIMUM VALUE LENGTH
           *              R7            PDE ADDRESS
           *              R8            ADDRESS OF GETMAIN ROUTINE
           *                            (ALSO WORK REGISTER)
           *              R9            WORK LENGTH REGISTER
           *              R10           WORK PARM END POINTER
           *              R11           PARM LIST POINTER
           *              R12           BASE REGISTER
           *
           RSPACE   STM   R14,R12,12(R13)    SAVE REGISTERS
                    LR    R12,R15            SET UP BASE REG
                    USING RSPACE,R12
                    LR    R11,R1             SAVE PARM PTR
                    LM    R2,R8,0(R1)        LOAD PARM ADDRESSES
                    LR    R7,R2              SAVE PDE ADDR OVER TRT'S
                    LA    R4,4(,R5)          SKIP OVER BUFFER HEADER
                    AH    R4,2(,R5)          POINT TO FIRST TEXT CHAR
                    CLI   0(R4),C'-'         START WITH MINUS?
                    BE    MINUS
                    CLI   0(R4),C'0'         START WITH DIGIT?
                    BL    MISSING            NO, PARM IS MISSING
                    CLI   0(R4),C'9'
                    BNH   TRYSPACE
0          MISSING  LM    R14,R12,12(R13)    RESTORE REGS
                    LA    R15,4              SAY NO SPACE VALUE THERE
                    BR    R14
0          MINUS    OI    6(R7),X'40'        SET PDE MINUS FLAG
                    LA    R4,1(,R4)          SKIP OVER MINUS SIGN
0          TRYSPACE LR    R3,R5              FIND END OF INPUT BUFFER
                    AH    R3,0(,R3)
                    CLC   0(2,R6),=H'0'      DID IKJEXTEN SPECIFY PARM?
                    BE    DEFLEN             NO, USE DEFAULT OF 8
                    IC    R6,2(,R6)          YES, LOAD DIGIT
                    N     R6,=F'15'          TURN OFF WORTHLESS BITS
                    B     SCANIT
0          DEFLEN   LA    R6,8               LOAD DEFAULT MAX LENGTH
-
-
      ××××××××××××××××××××
-     £ This is not a good design for  this recognizer.   It would be better
        to have another bit defined to mean  "K present",  or to convert the
        entire  value to  binary  and  store that  in  place  of the  string
        address.   The above design was chosen  to allow illustration of the
        use of the IKJPARS get routine.
0     June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.6
      Assembler Language Interfaces
1
0          SCANIT   LR    R9,R3
                    SR    R9,R4              COMPUTE REMAINING TEXT LENGTH
                    BCTR  R9,0               -1 FOR EX
                    CH    R9,=H'255'         REMAINDER VERY LONG?
                    BNH   SHORTEXT           NO.
                    LA    R9,255             YES, LOOK AT ONLY 256 CHARS
           SHORTEXT LA    R1,1(R4,R9)        PRELOAD END OF TEXT ADDR IN R1
                    EX    R9,FINDEND         LOOK FOR A NON-ALPHMERIC CHAR
                    BCTR  R1,0               POINT TO LAST ALPHAMERIC
                    LR    R10,R1             SAVE POINTER IN R10
                    LR    R9,R1
                    SR    R9,R4              GET VALUE LENGTH IN R9
                    BZ    LASTDIG            BR IF ONLY ONE DIGIT
                    BM    INVALID            ERROR IF LONELY MINUS
                    BCTR  R9,0               -1 FOR EX
                    EX    R9,CHEKDIG         MAKE SURE ALL CHARS BUT LAST
                    BNZ   INVALID            ARE DIGITS
                    LA    R9,1(,R9)          GET BACK LENGTH-1
                    CLI   0(R10),C'K'        IS LAST CHAR A K?
                    BE    GOTK
                    CLI   0(R10),C'k'        ALSO ALLOW LOWER CASE K
                    BE    GOTK
0          LASTDIG  CLI   0(R10),C'0'        MAKE SURE LAST (OR ONLY) CHAR
                    BL    INVALID            IS A DIGIT
                    CLI   0(R10),C'9'
                    BH    INVALID
                    LA    R9,1(,R9)          GET BACK LENGTH IN R9
                    CR    R9,R6              COMPARE TO MAX
                    BNH   GOODSPEC           BR IF NOT TOO LONG
0          TOOBIG   MVC   8(4,R11),=A(BIGMSG) STORE 2ND LEVEL MSG ADDR
0          INVALID  XC    0(8,R7),0(R7)      RESTORE PDE TO ZEROES
                    LA    R4,3(,R5)          FIND TEXT START-1
                    SR    R10,R4             COMPUTE NEW OFFSET
                    STH   R10,2(,R5)         STORE NEW OFFSET
                    LM    R14,R12,12(R13)    RESTORE REGS
                    LA    R15,8              INDICATE INVALID PARM
                    BR    R14                AND RETURN
0          GOODSPC  ST    R4,0(,R7)          STORE STRING ADDR IN PDE
                    STH   R9,4(,R7)          STORE NUMBER OF DIGITS
           RETSPC   OI    6(R7),X'80'        SET PDE PRESENCE BIT
                    LA    R4,3(,R5)          COMPUTE NEW OFFSET
                    SR    R10,R4
                    STH   R10,2(,R5)         STORE BACK IN BUFFER
                    LM    R14,R12,12(R13)    RESTORE REGS
                    SR    R15,R15            SET GOOD RET CODE
                    BR    R14                AND RETURN
0          GOTK     LR    R3,R9              SAVE VALUE LENGTH-1
                    LA    R9,3(,R9)          COMPUTE LENGTH TO RETURN
                    CR    R9,R6              IS THAT TOO BIG?
                    BH    TOOBIG             YES.
                    LR    R1,R9              NO, GET SOME MEMORY FOR
                    LR    R15,R8             AN EXPANDED VALUE
                    BALR  R14,R15            BY CALLING IKJPARS GET ROUTINE
                    LR    R8,R1              SAVE STORAGE ADDRESS
                    BCTR  R3,0               DON'T COPY THE K
                    EX    R3,MVSPC           MOVE DIGITS TO NEW STORAGE
                    LA    R3,1(R3,R8)        POINT TO NEXT BYTE
                    MVC   0(3,R3),=C'000'    PUT THREE ZEROES AFTER
                    ST    R8,0(,R7)          RETURN VALUE PTR IN PDE
                    STH   R9,4(,R7)          RETURN NEW LENGTH
                    B     RETSPC             AND RETURN HAPPILY
-
-
-
-     June 23, 1984                                                Chapter 1
-
-
      TSU System Aids Reference Manual                              Page 1.7
      Assembler Language Interfaces
1
0          *              EXECUTED INSTRUCTIONS
           FINDEND  TRT   0(0,R4),ANUMTAB    SCAN THRU ALPHAMERICS
           CHEKDIG  TRT   0(0,R4),NUMTAB     SCAN THRU NUMERICS
           MVSPC    MVC   0(0,R8),0(R4)      MOVE DIGITS TO NEW STORAGE
0                   LTORG
0          BIGMSG   DC    AL2(BIGEND-BIGMSG,0)
                    DC    C' VALUE HAS TOO MANY DIGITS'
           BIGEND   EQU   *
0          NUMTAB   DC    240X'01',10X'00',6X'01' NUMERIC TRT TABLE
0          ANUMTAB  DC    129X'01',9X'00',7X'01' ALPHANUMERIC TRT TABLE
                    DC    9X'00',8X'01',8X'00',23X'01'
                    DC    9X'00',7X'01',9X'00',8X'01'
                    DC    8X'00',6X'01',10X'00',6X'01'
                    END
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-     June 23, 1984                                                Chapter 1
