1
-
      The  UHB macros  are a  set of  macros  to make  writing other  macros
      easier.    They were  designed to  support the  writing of  high-class
      macros like the VSAM  macros,  which support myriads  of useful macro-
      forms (MFs)  and  addressing modes.   XWTO is an example  of a UHBMACS
      application,  and might not have been practical in its full generality
      without them.
0     The  UHB macros  will  work with  both Assembler  G  and Assembler  XF
      (without a special LSETC requirement for Assembler G).
0     In  the simplest  case,  to  define  a macro  which builds/modifies  a
      control  block and  issues  a user  SVC,   all you  need  to write  is
      something like:
0                   MACRO
           &LABEL   MYMACRO &OP1=,&OP2=,...&MF=I
           &LABEL   UHBBGEN MF=&MF
                    UHBGEN &OP1,op1-length,COM=op1-name,MF=&MF
                    UHBGEN &OP2,op2-length,COM=op2-name,MF=&MF
                       .
                       .
                       .
                    UHBEGEN MF=&MF
                    UHBBMOD MF=&MF
                    UHBMOD 0(1),&OP1,op1-length,MF=&MF
                    UHBMOD op1-length(1),&OP2,op2-length,MF=&MF
                       .
                       .
                       .
                    UHBSVC svcnumb,NAME=svc-name,MF=&MF
                    MEND
0     (It can be  more complicated than that upon occasion,   but many times
      you will find that the above is about all you need to do.)
0     Now,  to thrill you even more,  let me mention the notations supported
      by the above:
0          MF=I - Generates an inline parm list  and issues an SVC (or tells
                you  via a  global switch  to  take your  own action,   like
                calling a routine)
0          MF=L - Generates an inline parm list.
           MF=(L,,length)  - Generates  an inline parm list  and equates the
                "length" symbol to the list of the parm list.
           MF=(L,area,length)   - Generates  a  parm  list at  the  location
                specified by "area".   If a length is present, it is equated
                to the parm list length.
0          MF=(G,area,length)   - Generates  a  parm  list at  the  location
                specified by "area",  and issues the SVC (or sets the action
                flag).   If a length is present,   it is equated to the parm
                list length.
0          MF=(M,area)  -  Modifies the  parm list  present at  the location
                specified by "area".
0          MF=(E,area)  -  Modifies the  parm list  present at  the location
                specified by "area",  and issues the SVC (or sets the action
                flag).
0     Where  sensible,   operands  may  be  specified  using  the  following
      notations:
0          (xx) - indicates the data or address in register xx
           A:xx -  indicates the  address  of location  xx,   which must  be
                accessed via an A-type constant (i.e.,  may not be addressed
                via a register)
           S:xx -  indicates the  address  of location  xx,   which must  be
                accessed via a base register (i.e., may not be addressed via
                an address constant)
           *:xx - indicates  the data or  address referenced by  location xx
                via indirect addressing.
1
0                                                                     PAGE 2
0     Not counting the inner macros which  you shouldn't want to issue,  the
      UHB macros can be divided into structural macros,  data/action macros,
      and a few utility macros.  The structural macros are:
0          UHBBGEN - begin generation (always first)
+       ®
0          UHBSUB -  define a  dependent subblock  (ignore subblocks  for
+       ®
           now; I'll get to them)
0          UHBEGEN - end generation (appears  after the UHBGEN macros for
+       ®
           all operands)
0          UHBBMOD - begin modification (appears after the UHBEGEN macro)
+       ®
0          UHBACT -  decide whether  or not  action is  required (appears
+       ®
           after the UHBMOD  operands for all operands;   not required if
           you use UHBSVC to conditionally generate an SVC)
0     The data/action macros are as follows:
0          UHBGEN  -  generate  a control  block  item  (appears  between
+       ®
           UHBBGEN and UHBEGEN).    The value is assumed  to be a 1  to 4
           byte address
0          UHBGENF - generate  a control block flag  byte (same placement
+       ®
           as UHBGEN)
0          UHBGENV  - generate  a value  of some  non-address type  (same
+       ®
           placement as UHBGEN)
0          UHBMOD - modify a control  block item (appears between UHBBMOD
+       ®
           and UHBACT/UHBSVC).   The value is assumed to be a 1 to 4 byte
           address
0          UHBMODF - modify a control block  flag byte (same placement as
+       ®
           UHBMOD)
0          UHBMODV  -  modify a  value  of  some non-address  type  (same
+       ®
           placement as UHBMOD)
0          UHBSVC  - issue  an SVC  if the  MF shows  action is  required
+       ®
           (appears after the UHBMOD macros for all operands)
0     The utility macros are:
0          UHBLKUP - look  an operand up in a list  of possible (reserved
+       ®
           word)  values,   and return an  indication of which  value was
           found
0          UHBADDR - load  an address (specified in any  of the wonderful
+       ®
           formats introduced earlier) into a register
0     Now,  here is a macro-by-macro description of how to use them and what
      to expect.    (I'll leave sub-blocks out  for now;  after  you've seen
      them, you'll understand why.)
0     The syntax of UHBBGEN is:
0          &LABEL   UHBBGEN &ALIGN=4,&COM=PARM.LIST,&MF=
0     The ALIGN parameter is set to 4 (the default)  for fullword alignment,
      8 for double word  alignment,  2 for halfword alignment,  or  1 for no
      alignment at all.   The COM parameter is  used in comments to say what
      is being generated.  The MF parameter should, of course, be the MF you
      were passed.    The UHBBGEN macro generates  the start of  the control
      block, and any necessary prelude code.
0     The syntax of UHBEGEN is:
0                   UHBEGEN &COM=PARM.LIST,&MF=
0     The  COM and  MF  parmeters are  the same  as  for UHBBGEN.    UHBEGEN
      generates an equate  for the length of  the control block,  if  one is
      required.
1
0                                                                     PAGE 3
0     The syntax of UHBBMOD is:
0                   UHBBMOD &COM=PARM.LIST,&MF=
0     The  COM and  MF  parmeters are  the same  as  for UHBBGEN.    UHBBMOD
      generates  interlude code  if required  to  set up  for control  block
      modification.   For macros other than  static MF=L,  after UHBBMOD has
      been executed, R1 contains the relevant control block address.
0     The syntax of UHBACT is:
0                   UHBACT &MF=
0     MF has its usual meaning here.   UHBACT generates no code; it sets the
      global switch &UHBA to (1)  if the  MF indicates that action should be
      taken (i.e., MF was I, G or E).
0     The syntax of UHBGEN is:
0                   UHBGEN &VAL,&LEN,&COM=,&RQR=,&NAME=,&DEF=0,&MF=
0     &VAL  is the  address to  be generated  (usually taken  right from  an
      operand).   It  may be  specified as empty  or as  '*' to  indicate an
      omitted operand.  &LEN is the length (1-4) of the control block field.
      &COM is the name of the field (for comments).  &RQR should be set to Y
      for a required operand (required for MF=I and G,  that is;  the others
      are  impossible to  check).   &NAME  should  be set,   for a  required
      operand,  to the operand name for use  in the resulting MNOTE.   For a
      non-required operand,   &DEF can be used  to specify a  default value.
      And, of course, &MF is the usual.
0     The syntax of UHBGENF is:
0                   UHBGENF &ON=0,&OFF=0,&COM=OPTIONS,&MF=
0     &ON and &OFF  specify the bits to be  turned on and turned  off in the
      generated  option  byte.    They are  specified  as  integers,   e.g.,
      ON=240,OFF=128.   (That's not as odd as it looks; it's the natural way
      of computing bit values from the results of UHBLKUP.)  Any unmentioned
      bits are  left off,  as  are any which  are specified in  both places.
      (This means that B'01110000' is generated by the above.)   &COM is the
      description of the byte for comments, and by now you know what &MF is.
0     The syntax of UHBGENV is:
0                   UHBGENV &VAL,&LEN,&COM=VALUE,&TYPE=,&RQR=,
                          &NAME=,&DEF=,&MF=
0     &VAL is the  value to go into  the control block (usually  taken right
      from an operand).   It may be a  quoted string,  a typed string (e.g.,
      X'1234'),  or something  else.   ("Something else" is  handled only by
      UHBMODV, however.)  &LEN is the length of the field.  You can leave it
      out if  you want  to have the  length implied by  a literal,   but you
      usually won't.   &COM is a field description for the comments.   &TYPE
      is the type  of field (e.g.,  E for  single precision floating-point).
      You can leave it  out if it's implied by a  typed quoted value.   &RQR
      and &NAME are the same as for UHBGEN.  &DEF is a default value; if you
      don't provide one, a DS is generated (since for some types there is no
      convenient zero-like value).
0     The syntax of UHBMOD is:
0                   UHBMOD &TO,&FROM,&LEN,&REG=14,&COM=OPERAND,&MF=
0     Here,  &TO is where  to find the control block field  to modify (e.g.,
      8(1)).   Remember, UHBMOD should only appear after UHBBMOD, which sets
      up R1 nicely for you.   &FROM is the value to move in (generally taken
      right from an operand),  and &LEN is the length of the field (1 to 4).
      &REG is a register to use as  a work register if necessary.   &COM and
      &MF you should know by now.
0     The syntax of UHBMODF is:
0                   UHBMODF &TO,&ON=0,&OFF=0,&COM=OPTIONS,&MF=
0     Here, &TO is where to modify the bits, like for UHBMOD.  The remaining
      keywords are just  like for UHBGENF.   Note that  UHBMODF generates no
      code unless the MF is M or E; for the rest, it is assumed that UHBGENF
      has taken care of things.   UHBMODF does not modify bits which are not
1
0                                                                     PAGE 4
0     mentioned in either &ON or &OFF.
1
0                                                                     PAGE 5
0     The syntax of UHBMODV is:
0                   UHBMODV &TO,&FROM,&LEN,&COM=VALUE,&MF=
0     &TO and &FROM are basically like  for UHBMOD.   &FROM may be specified
      as a  quoted string or  a typed string;   in this case,   UHBMODV will
      generate no code except for MF=M or  MF=M.   &LEN is the length of the
      field;  it may be specified as '*' to  use a length implied by the &TO
      field.
0     The syntax of UHBSVC is:
0                   UHBSVC &SVC,&NAME=,&MF=
0     &SVC is the number of the SVC to  generate.   &NAME is the name of the
      SVC to  put in a  comment.   The SVC  is generated  only if the  MF is
      appropriate.
0     The syntax of UHBLKUP is:
0                   UHBLKUP &ARG,&VAL=(value-list),&OUT=(out-list),
                          &NAME=name
0     &ARG is the value  to look up.   &VAL is a  list of permissible values
      (e.g.,  reserved  words).   &OUT is  an optional parameter  giving the
      value which should be returned for each value in the list;  if &OUT is
      omitted,  the value returned is the  ordinal number in the list (e.g.,
      the value '2' is returned for the second value).  &NAME is an optional
      name for the value to be looked up.  If &NAME is present and the value
      is not found, a diagnostic is generated; otherwise, UHBLKUP is silent.
      In either case it returns a blank value.   (And, if you were wondering
      just HOW it returns a value,  well,  I'm getting to that.   The answer
      is...)  The global SETC symbol &UHBL is used to return the findings of
      UHBLKUP.
0     The syntax of UHBADDR is:
0          &LABEL   UHBADDR &REG,&ADDR,&LEN=4,&COM=
0     UHBADDR is  used to  get an  address into  a register.    &REG is  the
      register to load, &ADDR is the address to load, &LEN gives the address
      length  (1-4),   and  &COM  is  a comment  to  put  on  the  generated
      instruction.
-     To aid more advanced applications of the UHB macros (i.e., those where
      you have to do a little work yourself), the macros support some global
      SET symbols,  to let you avoid generating  code where it is not needed
      or does not belong.  Symbols of interest are:
0          &UHBIM -- This SETB symbol is set to (1)  by UHBBGEN if the MF
+       ®
           value  is invalid.    It  is reasonable  to  check this  after
           UHBBGEN and MEXIT if it is set.  Even though none of the other
           macros will produce any code in  this case,  you can save them
           some work.
0          &UHBG -- This SETB symbol is set  to (1)  by UHBBGEN if the MF
+       ®
           value requires generation  (as opposed to modification)   of a
           control block definition.   If it is off, you can avoid any of
           your own code having to do with generation.
0          &UHBM -- This SETB symbol is set to (1) after UHBBMOD has been
+       ®
           called if  either the MF  value or previous  generation macros
           have detected a necessity for control block modification.   If
           it is off, you can skip modification and go directly to action
           code.
0          &UHBA -- This SETB  symbol is set to (1)  by  UHBACT if the MF
+       ®
           value requires the generation of action code.
0          &UHBGL -- This  SETC symbol is set  by UHBBGEN to the  name of
+       ®
           any generated control block.  If MF=I, this is not the same as
           the label on the UHBBGEN macro call.
0          &UHBL -- This  SETC symbol is used to  return information from
+       ®
           the UHBLKUP macro.
1
0                                                                     PAGE 6
0     Now,  I suppose,  I'd better write about sub-blocks.   Sub-blocks were
      invented for  cases where  one control block  contains the  address of
      another,  which you'd  like to generate separately,  or  at least only
      when required.   This  implementation of the sub-block  concept is not
      altogether successful, but it was adequate for our original needs,  so
      maybe it will  be for yours too.   To  give you an idea  what it's all
      about,  I'll  expand the  original simple example  above to  contain a
      single, unconditional sub-block.
0                   MACRO
           &LABEL   MYMACRO &OP1=,&OP2=,...&MF=I
           &LABEL   UHBBGEN MF=&MF
                    UHBGEN &OP1,op1-length,COM=op1-name,MF=&MF
                    UHBGEN &OP2,op2-length,COM=op2-name,MF=&MF
                    UHBGEN *,subptr-length,SUB=1,MF=&MF
                       .
                       .
                       .
                    UHBSUB 1,MF=&MF
                    UHBGEN &SUBOP1,subop1-length,COM=subop1-name,MF=&MF
                    UHBGEN &SUBOP2,subop2-length,COM=subop2-name,MF=&MF
                       .
                       .
                       .
                    UHBEGEN MF=&MF
                    UHBBMOD MF=&MF
                    UHBMOD 0(1),&OP1,op1-length,MF=&MF
                    UHBMOD op1-length(1),&OP2,op2-length,MF=&MF
                    UHBMOD later(1),*,subptr-length,SUB=1,REG=14,MF=&MF
                    UHBMOD 0(14),&SUBOP1,subop1-length,REG=0,MF=&MF
                       .
                       .
                       .
                    UHBSVC svcnumb,NAME=svc-name,MF=&MF
                    MEND
0     The changes that were made above are as follows:
0          A UHBGEN macro was inserted for  the pointer to the sub-block.
+       ®
           Its address is  specified as *;  additionally,  it  is given a
           sub-block number  (1 to 5).    If you  want,  you can  use the
           parameter &SUBID to assign a name to the label put on the sub-
           block when it is finally generated.  SUB and SUBID are ignored
           if the first postional parameter is not "*".
0          A UHBSUB macro is placed after the last mainline UHBGEN macro,
+       ®
           to indicate the start of a sub-block (giving the number of the
           sub-block,  of course).   If that sub-block is not wanted this
           time  (i.e.,  SUB=n  never  appeared on  any  UHBGEN *  macro,
           nothing is generated).
0          UHBGEN macros appear for the items in the sub-block.   If that
+       ®
           sub-block was not defined this time, nothing is generated.
0          A UHBMOD  macro is  inserted at an  appropriate point  for the
+       ®
           sub-block  pointer,   specifiying   SUB=sub-block-number,   an
           address of "*",   and,  most important,  a register  to use to
           address the sub-block.   UHBMOD will  expand into code to load
           the register with the sub-block pointer, either from the block
           generated earlier by  UHBSUB,  or from the  destination block,
           for MF=M or MF=E.   Again, if the address is not "*",  the SUB
           specification is ignored.
0          UHBMOD macros are added to modify sub-block fields.   Here, if
+       ®
           you have conditional sub-blocks,  you must be careful.   These
           UHBMOD macros are  unconditional,  so you will  have to branch
           around  them   if  they  might  contain   non-null,   non-star
           specifications,  but the sub-block is not present.   Note that
           these macros use  the REG from the  UHBMOD macro for  the sub-
           block pointer to address the area  to be modified.   They also
           specify REG  themselves to  keep the  sub-block register  from
           being reused.
1
0                                                                     PAGE 7
0     One final warning:  If you have a complicated application, let the UHB
      macros generate everything for you,  even if it's just as easy to emit
      a plain old  "DC".   There are certain cases where  the generated code
      won't work  right if  you go  generating your  own instructions,   for
      instance,  if you gen something before the point where they decides to
      emit a label.   It's not that much more trouble to code a UHBGENV, and
      you can  save yourself  (and the end  users of your  macro)  a  lot of
      grief.
